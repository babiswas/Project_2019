SQLAlchemy:
What is engine and what is connection pools?
ORM translates the python classes into database tables.

Python DBAPI:
psycopg(Postgre database driver)
pymysql(mysql driver)
mysqlconnector(mysql driver)


SQLAlchemy Engines:

from sqlalchemy import create_engine
engine=create_engine('sqlite://census_nyc.sqlite')
print(engine.table_names())

To get all the table names in the database.
**Creating an engine doesn't connect to the database instantly.


Connection Pooling:
-------------------
maximum pool size.

1.pool_size
2.max_overflow
3.pool_recycle
4.pool_timeout


SQLAlchemy Dialects:
--------------------
Dialect is the database the program is talking to.


SQLAlchemy datatypes:
--------------------

class Product(Base):
    __tablename__='products'
    id=Column(Integer,primary_key=True)
    title=Column('title',String(32))
    in_stock=Column('in_stock',Boolean)
    quantity=Column('quantity',Integer)
    price=Column('price',Numeric)

SQLAlchemy Relationship Patterns:
--------------------------------
Relationships
1.One to Many
2.Many to Many
3.One to One
4.Many to one


This are the possible relationship.

One to Many Relationship:
------------------------

class Article(Base):
   __tablename__='articles'
   id=Column(Integer,primary_key=True)
   comments=relationship('Comment')

class Comment(Base):
   __tablename__='comments'
   id=Column(Integer,primary_key=True)
   article_id=Column(Integer,ForeignKey('articles.id'))


Many to one relationship:
------------------------

class Tire(Base):
   __tablename__='tires'
   id=Column(Integer,primary_key=True)
   car_id=Column(Integer,ForeignKey('cars.id'))
   car=relationship("Car")


class Car:
  __tablename__='cars'
  id=Column(Integer,primary_key=True)


One to One Relationship
-----------------------

class Person(Base):
   __tablename__='people'
   id=Integer(Integer,primary_key=True)
   mobile_phone=relationship("Mobilephone",uselist=False,back_populates="person")

class MobilePhone(Base):
   __tablename__='mobile_phones'
   id=Column(Integer,primary_key=True)
   person_id=Column(Integer,ForeignKey('people.id))
   person=relationship("Person",back_populates="mobile_phone")


SQLAlchemy ORM Cascade:
-----------------------

cascade delete
cascade update

SQLAlchemy Sessions:
--------------------
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker

engine=create_engine('postgre://usr:pass@localhost:5432/sqlalchemy)
Session=sessionmaker(bind=engine)
session=Session()

SQLAlchemy in Practise:
-----------------------


 	










